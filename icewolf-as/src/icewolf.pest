WHITESPACE = _{ " " | "\t" | "\n" | "\r" | "\x0B" | "\x0C" | "\xA0" | SPACE_SEPARATOR }
COMMENT = _{ ";" ~ (!"\n" ~ ANY)* }

program = { SOI ~ (label | binary_include | origin | align | constant | data | instruction)* ~ EOI }

origin = {
    origin_with_padding    |
    origin_without_padding
}
origin_with_padding = { ".origin.padding" ~ operand }
origin_without_padding = { ".origin" ~ operand }
align = { ".align" ~ operand }

binary_include = { ".binary_include" ~ immediate_string }

operand = {
    register |
    immediate_bin |
    immediate_hex |
    immediate_dec |
    immediate_char |
    label_ref |
    label_abs_ref
}

register = ${ "%" ~ register_name }
register_name = @{ (ASCII_ALPHANUMERIC | ".")+ }

immediate_bin  = ${ "0b" ~ bin_num }
bin_num = @{ (ASCII_BIN_DIGIT | "_")+ }
immediate_hex  = ${ "0x" ~ hex_num }
hex_num = @{ (ASCII_HEX_DIGIT | "_")+ }
immediate_dec  = ${ dec_num }
dec_num = @{ (ASCII_DIGIT | "_")+ }
immediate_char = ${ "'" ~ char_body ~ "'" }
char_body = @{ '\x00'..'\x7F' }
immediate_string = ${ "\"" ~ string_body ~ "\"" }
string_body = @{ string_body_chars* }
string_body_chars = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ string_body_chars
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

data = {
    data_byte |
    data_half |
    data_word |
    data_long |
    data_str  |
    data_fill
}
data_byte = { ".byte" ~ operand }
data_half = { ".half" ~ operand }
data_word = { ".word" ~ operand }
data_long = { ".long" ~ operand }
data_str  = { ".string" ~ immediate_string }
data_fill = { ".filling" ~ operand ~ "," ~ operand }

constant = { ".constant" ~ constant_name ~ operand }
constant_name = ${label_name ~ ":"}

label = { label_type? ~ label_name ~ ":" }
label_type = {
    label_external |
    label_global
}
label_ref = ${ "@" ~ label_name }
label_abs_ref = ${ "$" ~ label_name }
label_name = @{ label_name_chars+ }
label_name_chars = @{ ASCII_ALPHANUMERIC | "_" | "." }
label_external = { ".extern" }
label_global   = { ".global" }

instruction = {
    instruction_3arg ~ operand ~ "," ~ operand ~ "," ~ operand |
    instruction_2arg ~ operand ~ "," ~ operand |
    instruction_1arg ~ operand |
    instruction_0arg
}

instruction_0arg = @{
    "tret" | // mov %zero, %trapret
    "nop"    // mov %zero, %zero
}

instruction_1arg = @{
    "fence" | // mov [arg], %mem.fence
    "lui" | // mov [arg], %lui
    "ecall" | // mov [arg], %ecall
    "ba" | // mov [arg], %pc
    "b" | // mov [arg], %bran.rel
    "as" | // mov [reg], %alu.acc
    "add" | // mov [arg], %alu.add
    "sub" | // mov [arg], %alu.sub
    "xor" | // mov [arg], %alu.xor
    "or" | // mov [arg], %alu.or
    "and" | // mov [arg], %alu.and
    "sll" | // mov [arg], %alu.sll
    "srl" | // mov [arg], %alu.srl
    "sra" | // mov [arg], %alu.sra
    "slt" | // mov [arg], %alu.slt
    "sltu" | // mov [arg], %alu.sltu
    "mul" | // mov [arg], %alu.mul
    "mulh" | // mov [arg], %alu.mulh
    "mulsu" | // mov [arg], %alu.mulsu
    "mulu" | // mov [arg], %alu.mulu
    "div" | // mov [arg], %alu.div
    "divu" | // mov [arg], %alu.divu
    "rem" | // mov [arg], %alu.rem
    "remu" | // mov [arg], %alu.remu
    "lb" | // mov %alu.lb, [reg]
    "lh" | // mov %alu.lh, [reg]
    "lw" | // mov %alu.lw, [reg]
    "ld" | // mov %alu.ld, [reg]
    "sb" | // mov [val], %alu.sb
    "sh" | // mov [val], %alu.sh
    "sw" | // mov [val], %alu.sw
    "sd"   // mov [val], %alu.sd
}

instruction_2arg = @{
    "mov" |
    "bal" |
    "bala"
}

instruction_3arg = @{
    "beq"  |
    "bne"  |
    "bltu" |
    "bgeu" |
    "blt"  |
    "bge"
}