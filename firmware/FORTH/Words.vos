(int compStrPtr 0)
(int branchPtr 0)
(int branchQPtr 0)
(fn DefineWords ()
    (NewNative "(lit)" (ptrOf fun_lit))

    /* Branching */
    (NewNative "branch" (ptrOf fun_branch))
    (= branchPtr dictFinalWord)
    (NewNative "branch?" (ptrOf fun_branch_q))
    (= branchQPtr dictFinalWord)

    /* Math */
    (NewNative "+" (ptrOf fun_add))
    (NewNative "-" (ptrOf fun_sub))
    (NewNative "*" (ptrOf fun_mul))
    (NewNative "/" (ptrOf fun_div))
    (NewNative "mod" (ptrOf fun_rem))
    (NewNative "u*" (ptrOf fun_umul))
    (NewNative "u/" (ptrOf fun_udiv))
    (NewNative "umod" (ptrOf fun_urem))
    (NewNative "and" (ptrOf fun_and))
    (NewNative "or" (ptrOf fun_or))
    (NewNative "xor" (ptrOf fun_xor))

    /* Conditional */
    (NewNative "=" (ptrOf fun_equal))
    (NewNative "<" (ptrOf fun_less))
    (NewNative ">" (ptrOf fun_more))
    (NewNative "u<" (ptrOf fun_uless))
    (NewNative "0<" (ptrOf fun_zeroless))
    (NewNative "0=" (ptrOf fun_zeroequal))
    (NewNative "0>" (ptrOf fun_zeromore))

    /* Stack */
    (NewNative "swap" (ptrOf fun_swap))
    (NewNative "rot" (ptrOf fun_rot))
    (NewNative "dup" (ptrOf fun_dup))
    (NewNative "drop" (ptrOf fun_drop))

    /* Memory */
    (NewNative "@" (ptrOf fun_peek))
    (NewNative "!" (ptrOf fun_poke))
    (NewNative "," (ptrOf fun_comma))
    (NewNative "c@" (ptrOf fun_peekC))
    (NewNative "c!" (ptrOf fun_pokeC))
    (NewNative "c," (ptrOf fun_commaC))

    /* Conditional */
    (NewImmed "if" (ptrOf fun_if))
    (NewImmed "then" (ptrOf fun_then))
    (NewImmed "else" (ptrOf fun_else))

    /* Loop */
    (NewImmed "begin" (ptrOf fun_begin))
    (NewImmed "until" (ptrOf fun_until))
    (NewImmed "again" (ptrOf fun_again))
    (NewImmed "do" (ptrOf fun_do))
    (NewImmed "loop" (ptrOf fun_loop))

    /* CRT */
    (NewNative "." (ptrOf fun_print))
    (NewNative ".s" (ptrOf fun_printS))
    (NewImmed ".\"" (ptrOf fun_printStr))
    (NewNative "(.\")" (ptrOf fun_printStrInternal))
    (= compStrPtr dictFinalWord)
    (NewNative ".(" (ptrOf fun_printStrInterp))
    (NewNative "cr" (ptrOf fun_cr))
    (NewNative "page" (ptrOf ConsoleInit))

    /* Interpreter */
    (NewNative "word" (ptrOf fun_word))
    (NewNative "interpret" (ptrOf fun_interpret))
    (NewNative "execute" (ptrOf fun_execute))

    /* Compiler */
    (NewNative ":" (ptrOf fun_colon))
    (NewImmed ";" (ptrOf fun_semicolon))

    (NewNative "forget" (ptrOf fun_forget))
    
    /* Special */
    (NewNative "reset" 0xbff00000)

    (NewNative "words" (ptrOf fun_words))
)

(fn fun_lit ()
    (dPush (w@ insnOff))
    (= insnOff (+ insnOff 4))
)

(fn fun_branch ()
    (int jump)
    (= insnOff (w@ insnOff))
)

(fn fun_branch_q ()
    (int jump)
    (= jump (w@ insnOff))
    (if (u< (dPop) 1) (= insnOff (w@  insnOff)) (= insnOff (+ insnOff 4)))
)

(fn fun_add () (dPush (+ (dPop) (dPop))))
(fn fun_sub () (int b) (= b (dPop)) (dPush (- (dPop) b)))
(fn fun_mul () (dPush (* (dPop) (dPop))))
(fn fun_div () (int b) (= b (dPop)) (dPush (/ (dPop) b)))
(fn fun_rem () (int b) (= b (dPop)) (dPush (% (dPop) b)))
(fn fun_umul () (dPush (u* (dPop) (dPop))))
(fn fun_udiv () (int b) (= b (dPop)) (dPush (u/ (dPop) b)))
(fn fun_urem () (int b) (= b (dPop)) (dPush (u% (dPop) b)))
(fn fun_and () (dPush (& (dPop) (dPop))))
(fn fun_or () (dPush (| (dPop) (dPop))))
(fn fun_xor () (int b) (= b (dPop)) (dPush (^ (dPop) b)))

(fn fun_equal () (dPush (- 0 (== (dPop) (dPop)))))
(fn fun_less () (int b) (= b (dPop)) (dPush (- 0 (<  (dPop) b))))
(fn fun_more () (int b) (= b (dPop)) (dPush (- 0 (>  (dPop) b))))
(fn fun_uless () (int b) (= b (dPop)) (dPush (- 0 (u<  (dPop) b))))
(fn fun_zeroless () (int a) (= a (dPop)) (dPush (- 0 (< a 0))))
(fn fun_zeroequal () (int a) (= a (dPop)) (dPush (- 0 (== a 0))))
(fn fun_zeromore () (int a) (= a (dPop)) (dPush (- 0 (> a 0))))

(fn fun_peek ()
    (int addr)
    (= addr (dPop))
    (dPush (w@ addr))
)

(fn fun_poke ()
    (int addr dat)
    (= addr (dPop))
    (= dat (dPop))
    (w! addr dat)
)

(fn fun_comma ()
    (int dat)
    (= dat (dPop))
    (AlignDict)
    (w! dictTail dat)
    (= dictTail (+ dictTail 4))
)

(fn fun_peekC ()
    (int addr)
    (= addr (dPop))
    (dPush (b@ addr))
)

(fn fun_pokeC ()
    (int addr dat)
    (= addr (dPop))
    (= dat (dPop))
    (b! addr dat)
)

(fn fun_commaC ()
    (int dat)
    (= dat (dPop))
    (b! dictTail dat)
    (= dictTail (+ dictTail 1))
)

(fn fun_swap ()
    (int a b)
    (= a (dPop))
    (= b (dPop))
    (dPush a)
    (dPush b)
)

(fn fun_rot ()
    (int a)
    (= a (dPop))
    (fun_swap)
    (dPush a)
    (fun_swap)
)

(fn fun_dup ()
    (int a)
    (= a (dPop))
    (dPush a)
    (dPush a)
)

(fn fun_drop () (dPop))

(fn fun_if ()
    (dPush branchQPtr) (fun_comma)
    (rPush dictTail)
    (= dictTail (+ dictTail 4))
)

(fn fun_then ()
    (int jump)
    (= jump (rPop))
    (w! jump dictTail)
)

(fn fun_else ()
    (int jump)
    (= jump (rPop))
    (dPush branchPtr) (fun_comma)
    (rPush dictTail)
    (= dictTail (+ dictTail 4))
    (w! jump dictTail)
)

(fn fun_begin () (rPush dictTail))
(fn fun_until () (dPush (rPop)) (dPush branchQPtr) (fun_comma) (fun_comma))
(fn fun_again () (dPush (rPop)) (dPush branchPtr) (fun_comma) (fun_comma))

(fn fun_print ()
    (int num)
    (= num (dPop))
    (itoa num (wordBuf) 10)
    (ConsolePrint (wordBuf))
    (ConsolePrint " ")
)

(fn fun_printS ()
    (int num)
    (= num (dPop))
    (dPush num)
    (itoa num (wordBuf) 10)
    (ConsolePrint (wordBuf))
    (ConsolePrint " ")
)

(fn fun_printStr ()
    (int str ptr)
    (dPush 34) (fun_word) (= str (dPop))
    (dPush compStrPtr) (fun_comma)
    (= ptr dictTail)
    (= dictTail (+ dictTail (strlen str) 1))
    (memset ptr (- dictTail ptr) 0)
    (memcpy ptr str (strlen str))
    (AlignDict)
)

(fn fun_printStrInternal ()
    (int len)
    (ConsolePrint insnOff)
    (= len (+ 1 (strlen insnOff)))
    (if (u% len 4) (= len (+ (- 4 (u% len 4)) len)))
    (= insnOff (+ insnOff len))
)

(fn fun_printStrInterp ()
    (int str)
    (dPush 41) (fun_word) (= str (dPop))
    (ConsolePrint str)
)

(fn fun_cr () (ConsolePrint "\n"))

(fn fun_word ()
    (int delimitor i val)
    (memset (wordBuf) 128 0)
    (= i 0)
    (= delimitor (dPop))
    (= val (b@ (+ (stringBuffer) tokenOff i)))
    (if (== val 0x20) (do (= tokenOff (+ tokenOff 1)) (= val (b@ (+ (stringBuffer) tokenOff i)))))
    (while (& (!= val 0) (!= val delimitor))
        (b! (+ (wordBuf) i) val)
        (= i (+ i 1))
        (= val (b@ (+ (stringBuffer) tokenOff i)))
    )
    (= tokenOff (+ tokenOff (strlen (wordBuf)) (!= val 0)))
    (dPush (wordBuf))
)

(fn fun_interpret ()
    (int nextWord ptr)
    (dPush 0x20) (fun_word) (= nextWord (dPop))
    (while (strlen nextWord)
        (if (isnumber nextWord) (if forthState (do
            (dPush (atoi10 nextWord)) (dPush dictHead) (fun_comma) (fun_comma)
        ) (dPush (atoi10 nextWord)))
        (do
            (= ptr (FindWord nextWord))
            (if (== ptr 0) (do
                (ConsolePrint nextWord)
                (ConsolePrint "?")
                (return)
            ) (do
                (if (& (b@ (+ ptr (ForthWord.flags))) (FlagImmed)) (if forthState (do
                    (dPush ptr) 
                    (fun_execute)
                ) (do
                    (ConsolePrint "Interpreting compile-only word: ")
                    (ConsolePrint (+ ptr (ForthWord.name)))
                    (return)
                )) (if forthState (do
                    (dPush ptr) (fun_comma)
                ) (do
                    (dPush ptr)
                    (fun_execute)
                )))
            ))
        ))
        (dPush 0x20) (fun_word) (= nextWord (dPop))
    )
    (fun_q_stack)
)

(fn fun_execute ()
    (int ptr flags)
    (= ptr (dPop))
    (= flags (b@ (+ ptr (ForthWord.flags))))
    (if (& flags (FlagNative)) (call (w@ (+ ptr (ForthWord.data)))) (fun_run_list (+ ptr (ForthWord.data))))
)

(fn fun_run_list (offset)
    (int saved)
    (= saved insnOff)
    (= insnOff offset)
    (while (w@ insnOff)
        (dPush (w@ insnOff)) (= insnOff (+ insnOff 4)) (fun_execute)
    )
)

(fn fun_colon ()
    (int name)
    (= forthState 1)
    (dPush 0x20) (fun_word) (= name (dPop))
    (NewWord name 0 0 0)
)

(fn fun_semicolon ()
    (dPush 0) (fun_comma)
    (= forthState 0)
)

(fn fun_forget ()
    (int str ptr)
    (dPush 0x20) (fun_word) (= str (dPop))
    (= ptr (FindWord str))
    (if (== ptr 0) (do
        (ConsolePrint str)
        (ConsolePrint "?")
    ) (do
        (= dictFinalWord (w@ ptr))
        (= dictTail ptr)
    ))
)

(fn fun_words ()
    (int index)
    (= index dictFinalWord)
    (while 1
        (ConsolePrint (+ index (ForthWord.name)))
        (ConsolePrint " ")
        (if (== (w@ index) 0) (break) (= index (w@ index)))
    )
)

(fn fun_q_stack ()
    (if (> dTop 255) (do
        (ConsolePrint " Stack underflow")
        (= dTop 255)
    ) (> rTop 255) (do
        (ConsolePrint " Stack underflow")
        (= rTop 255)
    ) (< dTop 0) (do
        (ConsolePrint " Stack overflow")
        (= dTop 0)
    ) (< rTop 0) (do
        (ConsolePrint " Stack overflow")
        (= rTop 0)
    ) (ConsolePrint " ok"))
)