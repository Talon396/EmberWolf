(fn DefineWords ()
    /* Math */
    (NewNative "+" (ptrOf fun_add))
    (NewNative "-" (ptrOf fun_sub))
    (NewNative "*" (ptrOf fun_mul))
    (NewNative "/" (ptrOf fun_div))
    (NewNative "%" (ptrOf fun_rem))
    (NewNative "u*" (ptrOf fun_umul))
    (NewNative "u/" (ptrOf fun_udiv))
    (NewNative "u%" (ptrOf fun_urem))

    /* Stack */
    (NewNative "swap" (ptrOf fun_swap))
    (NewNative "dup" (ptrOf fun_dup))

    /* CRT */
    (NewNative "." (ptrOf fun_print))
    (NewNative ".s" (ptrOf fun_printS))
    (NewNative "cr" (ptrOf fun_cr))
    (NewNative "page" (ptrOf fun_page))

    /* Interpreter */
    (NewNative "word" (ptrOf fun_word))
    (NewNative "interpret" (ptrOf fun_interpret))
    (NewNative "execute" (ptrOf fun_execute))
    
    /* Special */
    (NewNative "reset" 0xbff00000)

    (NewNative "words" (ptrOf fun_words))
)

(fn fun_add () (dPush (+ (dPop) (dPop))))
(fn fun_sub () (int b) (= b (dPop)) (dPush (- (dPop) b)))
(fn fun_mul () (dPush (* (dPop) (dPop))))
(fn fun_div () (int b) (= b (dPop)) (dPush (/ (dPop) b)))
(fn fun_rem () (int b) (= b (dPop)) (dPush (% (dPop) b)))
(fn fun_umul () (dPush (u* (dPop) (dPop))))
(fn fun_udiv () (int b) (= b (dPop)) (dPush (u/ (dPop) b)))
(fn fun_urem () (int b) (= b (dPop)) (dPush (u% (dPop) b)))

(fn fun_swap ()
    (int a b)
    (= a (dPop))
    (= b (dPop))
    (dPush a)
    (dPush b)
)

(fn fun_dup ()
    (int a)
    (= a (dPop))
    (dPush a)
    (dPush a)
)

(fn fun_print ()
    (int num)
    (= num (dPop))
    (itoa num (wordBuf) 10)
    (ConsolePrint (wordBuf))
    (ConsolePrint " ")
)

(fn fun_printS ()
    (int num)
    (= num (dPop))
    (dPush num)
    (itoa num (wordBuf) 10)
    (ConsolePrint (wordBuf))
    (ConsolePrint " ")
)

(fn fun_cr () (ConsolePrint "\n"))

(fn fun_page ()
    (ConsoleInit)
)

(fn fun_word ()
    (int delimitor i val)
    (memset (wordBuf) 128 0)
    (= i 0)
    (= delimitor (dPop))
    (= val (b@ (+ (stringBuffer) tokenOff i)))
    (while (& (!= val 0) (!= val delimitor))
        (b! (+ (wordBuf) i) val)
        (= i (+ i 1))
        (= val (b@ (+ (stringBuffer) tokenOff i)))
    )
    (= tokenOff (+ tokenOff (strlen (wordBuf)) (!= val 0)))
    (dPush (wordBuf))
)

(fn fun_interpret ()
    (int nextWord ptr)
    (dPush 0x20) (fun_word) (= nextWord (dPop))
    (while (strlen nextWord)
        (if (& (u>= (b@ nextWord) 48) (u<= (b@ nextWord) 57)) (do
            (dPush (atoi10 nextWord))
        )
        (do
            (= ptr (FindWord nextWord))
            (if (== ptr 0) (do
                (ConsolePrint nextWord)
                (ConsolePrint "?")
                (return)
            ) (do (dPush ptr) (fun_execute)))
        ))
        (dPush 0x20) (fun_word) (= nextWord (dPop))
    )
    (fun_q_stack)
)

(fn fun_execute ()
    (int ptr flags)
    (= ptr (dPop))
    (= flags (b@ (+ ptr (ForthWord.flags))))
    (if (& flags (FlagNative)) (call (w@ (+ ptr (ForthWord.data)))))
)

(fn fun_words ()
    (int index)
    (= index dictFinalWord)
    (while 1
        (ConsolePrint (+ index (ForthWord.name)))
        (ConsolePrint " ")
        (if (== (w@ index) 0) (break) (= index (w@ index)))
    )
)

(fn fun_q_stack ()
    (if (u> dTop 255) (do
        (ConsolePrint "Stack underflow")
        (= dTop 255)
    ) (u> rTop 255) (do
        (ConsolePrint "Stack underflow")
        (= rTop 255)
    ) (< dTop 0) (do
        (ConsolePrint "Stack overflow")
        (= dTop 0)
    ) (< rTop 0) (do
        (ConsolePrint "Stack overflow")
        (= rTop 0)
    ) (ConsolePrint "ok"))
)